# INTEL CONFIDENTIAL
#
# Copyright 2020 Intel Corporation.
#
# This software and the related documents are Intel copyrighted materials, and your use of
# them is governed by the express license under which they were provided to you ("License").
# Unless the License provides otherwise, you may not use, modify, copy, publish, distribute,
# disclose or transmit this software or the related documents without Intel's prior written permission.
#
# This software and the related documents are provided as is, with no express or implied warranties,
# other than those that are expressly stated in the License.

---
- name: read istio confifguration
  include_vars: ../../../../opendek/roles/kubernetes/istio/defaults/main.yml

- name: create certificate secret for ingress gateway
  block:
    - name: Check if the secret exists for af-cred
      command: kubectl get secret af-credential -n istio-system
      failed_when: false
      register: get_secret_af_cred
    - name: delete af credential secret if exist
      command: kubectl delete secret af-credential -n istio-system
      when: get_secret_af_cred.rc == 0
    - name: create secret with certificates generated by ngc script
      shell: >
          kubectl create secret generic af-credential -n istio-system
          --from-file=tls.key={{ _certs_dest }}/ngc/afservice.ngc.key
          --from-file=tls.crt={{ _certs_dest }}/ngc/afservice.ngc.crt
          --from-file=ca.crt={{ _certs_dest }}/ngc/gateway-ca.crt
    - name: Check if the secret exists for oam-cred
      command: kubectl get secret oam-credential -n istio-system
      failed_when: false
      register: get_secret_oam_cred
    - name: delete af credential secret if exist
      command: kubectl delete secret oam-credential -n istio-system
      when: get_secret_oam_cred.rc == 0
    - name: create secret with certificates generated by ngc script
      shell: >
          kubectl create secret generic oam-credential -n istio-system
          --from-file=tls.key={{ _certs_dest }}/ngc/oamservice.ngc.key
          --from-file=tls.crt={{ _certs_dest }}/ngc/oamservice.ngc.crt
          --from-file=ca.crt={{ _certs_dest }}/ngc/gateway-ca.crt
  when: ne_istio_enable | default(false)

- name: copy ngc istio mtls yaml
  template:
    src: ngc-mtls.yml.j2
    dest: "{{ _istio_main_dir }}/ngc-mtls.yml"
    mode: preserve
  when: ne_istio_enable | default(false)

- name: copy ngc istio ingress gateway yaml
  copy:
    src: ngc-istio-ingress-gateway.yml
    dest: "{{ _istio_main_dir }}/"
    mode: preserve
  when: ne_istio_enable | default(false)

- name: copy ngc af virtual service yaml
  copy:
    src: ngc-af-virtual-service.yml
    dest: "{{ _istio_main_dir }}/"
    mode: preserve
  when: ne_istio_enable | default(false)

- name: copy ngc oam virtual service yaml
  copy:
    src: ngc-oam-virtual-service.yml
    dest: "{{ _istio_main_dir }}/"
    mode: preserve
  when: ne_istio_enable | default(false)

- name: copy ngc websocket af virtual service yaml
  template:
    src: ngc-ws-af-virtual-service.yml.j2
    dest: "{{ _istio_main_dir }}/ngc-ws-af-virtual-service.yml"
    mode: preserve
  when: ne_istio_enable | default(false)

- name: copy ngc notif af virtual service yaml
  copy:
    src: ngc-notif-af-virtual-service.yml
    dest: "{{ _istio_main_dir }}/ngc-notif-af-virtual-service.yml"
    mode: preserve
  when: ne_istio_enable | default(false)

- name: enforce mutual TLS for ngc namespace
  command: "kubectl apply -n {{ istio_deployment_namespace }} -f {{ _istio_main_dir }}/ngc-mtls.yml"
  when: ne_istio_enable | default(false)

- name: create ingress gateway for ngc namespace
  command: "kubectl apply -n {{ istio_deployment_namespace }} -f {{ _istio_main_dir }}/ngc-istio-ingress-gateway.yml"
  when: ne_istio_enable | default(false)

- name: configure ingress gateway routes
  block:
    - name: configure af routes
      command: "kubectl apply -n {{ istio_deployment_namespace }} -f {{ _istio_main_dir }}/ngc-af-virtual-service.yml"
    - name: configure af websocket routes
      command: "kubectl apply -n {{ istio_deployment_namespace }} -f {{ _istio_main_dir }}/ngc-ws-af-virtual-service.yml"
    - name: configure af smf notification routes
      command: "kubectl apply -n {{ istio_deployment_namespace }} -f {{ _istio_main_dir }}/ngc-notif-af-virtual-service.yml"
    - name: configure oam routes
      command: "kubectl apply -n {{ istio_deployment_namespace }} -f {{ _istio_main_dir }}/ngc-oam-virtual-service.yml"
  when: ne_istio_enable | default(false)
