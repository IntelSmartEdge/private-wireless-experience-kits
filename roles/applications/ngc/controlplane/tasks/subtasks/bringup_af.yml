# INTEL CONFIDENTIAL
#
# Copyright 2020-2020 Intel Corporation.
#
# This software and the related documents are Intel copyrighted materials, and your use of
# them is governed by the express license under which they were provided to you ("License").
# Unless the License provides otherwise, you may not use, modify, copy, publish, distribute,
# disclose or transmit this software or the related documents without Intel's prior written permission.
#
# This software and the related documents are provided as is, with no express or implied warranties,
# other than those that are expressly stated in the License.

---
- block:
    - name: create temporary custom .openness_gitconfig
      include_tasks: ../../../../../../opendek/roles/baseline_ansible/infrastructure/git_repo/tasks/gitconfig_bootstrap.yml
    - name: download modules for AF component
      shell: source /etc/profile && go mod download
      args:
        chdir: "{{ _git_repo_ngc_dir }}/cmd/af"
      register: result
      retries: "{{ number_of_retries }}"
      until: result is succeeded
      delay: "{{ retry_delay }}"
    - name: build AF component
      shell: source /etc/profile && make af
      args:
        chdir: "{{ _git_repo_ngc_dir }}"
  always:
    - name: remove .openness_gitconfig
      include_tasks: ../../../../../../opendek/roles/baseline_ansible/infrastructure/git_repo/tasks/gitconfig_remove.yml

- name: copy AF binaries to build folder
  copy:
    src: "{{ _git_repo_ngc_dist_dir }}/af"
    remote_src: true
    dest: "{{ _git_repo_ngc_build_dir }}/networkedge/af"
    mode: preserve

- name: copy AF configuration file
  copy:
    src: "{{ _git_repo_ngc_dir }}/configs/af.json"
    remote_src: true
    dest: "{{ _configs_dest }}/ngc"
    mode: preserve

- name: copy OAUTH2 configuration file
  copy:
    src: "{{ _git_repo_ngc_dir }}/configs/oauth2.json"
    remote_src: true
    dest: "{{ _configs_dest }}/ngc"
    mode: preserve

- name: update af config file
  shell: >
    set -o pipefail &&
    jq '.ServerConfig.Hostname="afservice" | .ServerConfig.UIEndpoint="http://{{ _controller_ip }}:3020" |
    .CliConfig.NEFHostname="nefservice" | .CliPAConfig.Hostname="cntfservice" | .ServerConfig.NotifWebsocketHostname="{{ _controller_ip }}" |
    .ServerConfig.NotifWebsocketPort=":30052" | .ServerConfig.NotifWSExposedPort=":30052" '
    "{{ _configs_dest }}"/ngc/af.json | sponge "{{ _configs_dest }}"/ngc/af.json
  args:
  changed_when: true

- name: configure af for istio service mesh
  shell: >
    set -o pipefail &&
    jq '.ServerConfig.TLSEnabled=false | .ServerConfig.NotifWebsocketHostname="websocket.ngc" |
    .ServerConfig.NotifWSExposedPort=":{{ gateway_port }}"'
    "{{ _configs_dest }}"/ngc/af.json | sponge "{{ _configs_dest }}"/ngc/af.json
  when: ne_istio_enable | default(false)

- name: build AF docker image
  docker_image:
    name: "{{ _image_name.af }}"
    tag: "{{ _image_tag.af }}"
    source: build
    build:
      path: "{{ _git_repo_ngc_build_dir }}/networkedge/af"
      pull: true
      use_config_proxy: true
  register: result
  retries: "{{ number_of_retries }}"
  until: result is succeeded
  delay: "{{ retry_delay }}"

# Additions for Helm chart
- name: remove af release if exist
  block:
    - name: check if af release exists
      command: helm status "{{ _helm_release_name.af }}"
      failed_when: false
      register: get_release_af
    - name: remove af release
      command: helm uninstall "{{ _helm_release_name.af }}"
      when: get_release_af.rc == 0
      changed_when: true

- name: tag AF docker image and push to Harbor Registry
  docker_image:
    name: "{{ _image_name.af }}"
    repository: "{{ _registry_ip_address }}:{{ _registry_port }}/intel/{{ _image_name.af }}"
    tag: "{{ _image_tag.oam }}"
    push: true
    source: local

- name: remove the locally built AF docker image
  docker_image:
    state: absent
    name: "{{ _image_name.af }}"
    tag: "{{ _image_tag.af }}"

- name: Copy AF helm chart
  copy:
    src: "{{ _helm_location }}/af"
    remote_src: true
    dest: "{{ ne_helm_charts_default_dir }}"
    mode: preserve

- name: create otel-agent side-car secret
  block:
    - name: remove if secret already exists
      command: kubectl delete secret root-cert -n ngc
      failed_when: false
    - name: create otel-agent secret
      command: kubectl create secret generic root-cert --from-file={{ _telemetry_cert_path }} --namespace=ngc

- name: create ngc config maps for configs-af
  block:
    - name: remove if config map already exists
      command: kubectl delete configmap af-cm -n ngc
      failed_when: false
    - name: create af config map template
      shell:
        cmd: >
          kubectl create configmap af-cm --from-file={{ _configs_dest }}/ngc/af.json -n ngc --dry-run=client -o yaml
          &> "{{ ne_helm_charts_default_dir }}/{{ _helm_release_name.af }}/templates/configmapAF.yaml"

# retry required since as part of  the previous uninstallation if the
# pods are still not completely deleted as it might take some time
- name: install the AF helm chart
  command: >
    helm  install {{ _helm_release_name.af }} {{ ne_helm_charts_default_dir }}/{{ _helm_release_name.af }}
    --set image.repository={{ _registry_ip_address }}:{{ _registry_port }}/intel/{{ _image_name.af }}
  changed_when: true
  register: result
  retries: "{{ number_of_retries }}"
  until: result is succeeded
  delay: "{{ retry_delay }}"
