# INTEL CONFIDENTIAL
#
# Copyright 2021-2021 Intel Corporation.
#
# This software and the related documents are Intel copyrighted materials, and your use of
# them is governed by the express license under which they were provided to you ("License").
# Unless the License provides otherwise, you may not use, modify, copy, publish, distribute,
# disclose or transmit this software or the related documents without Intel's prior written permission.
#
# This software and the related documents are provided as is, with no express or implied warranties,
# other than those that are expressly stated in the License.

---

- name: 'Create directories for docker image build process'
  file:
    path: '{{ item }}'
    state: directory
    recurse: true
    mode: a=rx,u+w
  loop:
    - '{{ cera_images_path }}{{ app_name }}'
    - '/opt/intel'

- name: Install Intel System Studio
  block:
  - name: Unarchive System Studio
    unarchive:
      src: '{{ gnb_system_studio }}'
      dest: '/opt/intel'
      remote_src: true

  - name: Copy license file
    copy:
      src: '{{ gnb_system_studio_license }}'
      dest: '/opt/intel/license.lic'
      mode: preserve
      remote_src: true

  - name: Get installed System Studio path
    shell: "ls -dt /opt/intel/system_studio* | head -1"
    register: icc_path

  - name: Set correct settings
    block:
    - lineinfile:
        path: '{{ icc_path.stdout }}/silent.cfg'
        regexp: '^(.*)ACCEPT_EULA='
        line: 'ACCEPT_EULA=accept'
    - lineinfile:
        path: '{{ icc_path.stdout }}/silent.cfg'
        regexp: '^(.*)PSET_INSTALL_DIR='
        line: 'PSET_INSTALL_DIR=/opt/intel'
    - lineinfile:
        path: '{{ icc_path.stdout }}/silent.cfg'
        regexp: '^(.*)ACTIVATION_LICENSE_FILE='
        line: 'ACTIVATION_LICENSE_FILE=/opt/intel/license.lic'
    - lineinfile:
        path: '{{ icc_path.stdout }}/silent.cfg'
        regexp: '^(.*)ACTIVATION_TYPE='
        line: 'ACTIVATION_TYPE=license_file'

  - name: Instal ICC
    command: './install.sh -s silent.cfg'
    args:
      chdir: '{{ icc_path.stdout }}'

  - name: Get installed System Studio path
    shell: "ls -dt /opt/intel/system_studio* | head -1"
    register: icc_path

- name: Install required packages
  yum:
    name:
      - libhugetlbfs-utils
      - numactl-devel
      - glibc-static
      - libstdc++-static
      - kernel-devel
      - gcc-c++
      - cmake
      - libhugetlbfs-devel
    state: present

- name: Build SDK
  shell: >
    source {{ icc_path.stdout }}/bin/iccvars.sh intel64 &&
    source set_env_var.sh &&
    ./flexran_build.sh -r 5gnr_sub6 -m sdk -b
  args:
    chdir: '{{ gnb_flexran_extracted }}'
    executable: /bin/bash
  environment:
    PATH: '{{ ansible_env.PATH }}:{{ icc_path.stdout }}/bin/'
  changed_when: true


- name: Build DPDK
  block:
  - name: Download DPDK
    get_url:
      url: 'http://static.dpdk.org/rel/dpdk-19.11.tar.gz'
      dest: '/opt'
  - name: Extract DPDK
    unarchive:
      src: '/opt/dpdk-19.11.tar.gz'
      dest: '/opt'
      remote_src: true
  - name: Copy patch
    copy:
      src: '{{ gnb_dpdk_patch }}'
      dest: '/opt/dpdk-19.11'
      mode: preserve
      remote_src: true
  - name: Apply patch
    command: 'git apply {{ gnb_dpdk_patch }}'  # noqa command-instead-of-module
    args:
      chdir: '/opt/dpdk-19.11'
  - name: Edit config/common_base
    block:
    - lineinfile:
        path: '/opt/dpdk-19.11/config/common_base'
        regexp: '^(.*)CONFIG_RTE_BBDEV_SDK_AVX2='
        line: 'CONFIG_RTE_BBDEV_SDK_AVX2=y'
    - lineinfile:
        path: '/opt/dpdk-19.11/config/common_base'
        regexp: '^(.*)CONFIG_RTE_BBDEV_SDK_AVX512='
        line: 'CONFIG_RTE_BBDEV_SDK_AVX512=y'
  - name: Install DPDK
    shell: >
      cd {{ gnb_flexran_extracted }} &&
      source set_env_var.sh &&
      cd /opt/dpdk-19.11 &&
      source {{ icc_path.stdout }}/bin/iccvars.sh intel64 &&
      make install -j 8 T=x86_64-native-linuxapp-icc DESTDIR=/opt/dpdk-19.11
    args:
      executable: /bin/bash
    environment:
      PATH: '{{ ansible_env.PATH }}:{{ icc_path.stdout }}/bin/'
      RTE_TARGET: 'x86_64-native-linuxapp-icc'
      RTE_SDK: '/opt/dpdk-19.11'
      DESTDIR: '/opt/dpdk-19.11'

- name: Build Flexran
  block:
  - name: Build Flexran
    shell: >
      source {{ icc_path.stdout }}/bin/iccvars.sh intel64 &&
      source set_env_var.sh &&
      ./flexran_build.sh -r 5gnr_sub6 -b
    args:
      chdir: '{{ gnb_flexran_extracted }}'
      executable: /bin/bash
    environment:
      PATH: '{{ ansible_env.PATH }}:{{ icc_path.stdout }}/bin/'
      RTE_TARGET: 'x86_64-native-linuxapp-icc'
      RTE_SDK: '/opt/dpdk-19.11'
      LD_LIBRARY_PATH: '{{ gnb_flexran_extracted }}/wls_mod/lib'

- name: Create docker image
  block:
  - name: Extract confd
    unarchive:
      src: '{{ gnb_confd }}'
      dest: '{{ gnb_confd | dirname }}'
      remote_src: true

  - name: 'Copy docker file to host'
    copy:
      src: '{{ _edgeapps_git_repo.dest }}/network-functions/ran/5G/gnb/'
      dest: '{{ cera_images_path }}{{ app_name }}'
      mode: preserve
      backup: false

  - name: Build docker image  # noqa command-instead-of-shell
    shell: ./build_gnb_image.sh
    args:
      chdir: '{{ cera_images_path }}{{ app_name }}'
      executable: /bin/bash
    environment:
      FLEXRAN_DIR: '{{ gnb_flexran_extracted }}'
      ICC_DIR: '{{ icc_path.stdout }}'
      CONFD_DIR: '{{ gnb_confd | dirname }}/confd-basic-7.3.linux.x86_64'
      DIR_WIRELESS_SDK: '{{ gnb_flexran_extracted }}/sdk/build-avx512-icc'
      DIR_WIRELESS_TEST_5G: '{{ gnb_flexran_extracted }}/tests/nr5g'
      RTE_SDK: '/opt/dpdk-19.11'
      CU_DU_DIR: '{{ gnb_cu_du_bin_extracted }}'

- name: Login harbor registry firstly
  command: docker login "{{ openness_harbor_registry_ip }}:{{ docker_registry_port }}" -uadmin -p{{ harbor_admin_password }}
  retries: 60
  delay: 15
  failed_when: false
  changed_when: false

- name: Push image
  docker_image:
    name: "{{ app_name }}:{{ image_tag }}"
    repository: "{{ openness_harbor_registry_address }}/{{ app_name }}"
    tag: "{{ image_tag }}"
    push: true
