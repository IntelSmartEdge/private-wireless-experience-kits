# INTEL CONFIDENTIAL
#
# Copyright 2019-2021 Intel Corporation.
#
# This software and the related documents are Intel copyrighted materials, and your use of
# them is governed by the express license under which they were provided to you ("License").
# Unless the License provides otherwise, you may not use, modify, copy, publish, distribute,
# disclose or transmit this software or the related documents without Intel's prior written permission.
#
# This software and the related documents are provided as is, with no express or implied warranties,
# other than those that are expressly stated in the License.

---
- name: root CA creation
  block:
    - name: create directory for root CA
      file:
        name: "{{ _certs_dest }}/CA"
        state: directory
        mode: a=rwx
    - name: create root CA
      command: "{{ project_dir }}/scripts/tls_pair.sh smartedge {{ _certs_dest }}/CA"
      become: yes
    - name: set CA private key mode
      file:
        path: "{{ _certs_dest }}/CA/key.pem"
        mode: a=,u=rw
      become: yes

- name: create root CA secret
  block:
    - name: check if root CA secret exists
      command: kubectl get secret root-ca --namespace={{ system_namespace }}
      failed_when: false
      register: get_secret_rootca
    - name: create secret with root CA
      shell: >
        kubectl create secret generic root-ca
        --from-file={{ _certs_dest }}/CA/key.pem
        --from-file={{ _certs_dest }}/CA/cert.pem
        --namespace={{ system_namespace }}
      when: get_secret_rootca.rc == 1
      become: yes

- name: create certificate generator secret
  block:
    - name: check if certificate generator secret exists
      command: kubectl get secret certgen --namespace={{ system_namespace }}
      failed_when: false
      register: get_secret_certgen
    - name: create secret with certificate generator
      shell: >
        kubectl create secret generic certgen
        --from-file={{ project_dir }}/scripts/tls_pair.sh
        --from-file={{ project_dir }}/scripts/entrypoint_tls.sh
        --namespace={{ system_namespace }}
      when: get_secret_certgen.rc == 1
