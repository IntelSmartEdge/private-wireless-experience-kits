#!/bin/sh
# INTEL CONFIDENTIAL
#
# Copyright 2020-2022 Intel Corporation.
#
# This software and the related documents are Intel copyrighted materials, and your use of
# them is governed by the express license under which they were provided to you ("License").
# Unless the License provides otherwise, you may not use, modify, copy, publish, distribute,
# disclose or transmit this software or the related documents without Intel's prior written permission.
#
# This software and the related documents are provided as is, with no express or implied warranties,
# other than those that are expressly stated in the License.

mkdir -p /root/config/
cp -f /root/config_map/sys_config.txt /root/config/
CUPATH=/root/config/sys_config.txt
cp /opt/bins/bc /bin/
sed -i -e "s/\(.*config_map\/sys_config.txt\)/# \1/" /root/docker-entrypoint.sh

get_cpu_list(){
cpus=$(cat /sys/fs/cgroup/cpuset/cpuset.cpus)
cpuset=$(cat /proc/self/cpuset)
cpus=$(cat /sys/fs/cgroup/cpuset/$cpuset/cpuset.cpus)
#cpus=$(cat /sys/fs/cgroup/cpuset/kubepods/cgroup/cpuset/$cpuset/cpuset.cpus)
cpu_l=""
for i in $(echo $cpus | tr , " "); do
  # if [[ $i =~ "-" ]]; then
  if [ -z "${i##*-*}" ]; then
    bg=${i%%-*}
    en=${i##*-}
    for j in $(seq $bg $en);do
      if [ -z "$cpu_l" ]; then
        cpu_l=$j
      else
        cpu_l="$cpu_l $j"
      fi
    done
  else
    if [ -z "$cpu_l" ]; then
        cpu_l=$i
      else
        cpu_l="$cpu_l $i"
    fi
  fi
done
echo $cpu_l
}

# $1 element tag, $2 element value, $3 the n time occurrent, $4 file name
function sub_xml_val ()
{
  sed -i -e ':a;N;$!ba; s/[^>]*\(<\/'"$1"'>\)/'"$2"'\1/'"$3"'' $4
}

# start length string, sh not support array, so we add this function.
index_strings(){
argv=$#
start=$1
len=$2
if [ $# -le 2 ]; then
  echo ""
  return 1
fi
if [[ ! -z "${start//[0-9]}" ]]; then
  echo ""
  return 1
fi
if [[ ! -z "${len//[0-9]}" ]]; then
  echo ""
  return 1
fi

idx=$((start + 2))
echo ${@:$idx:$len}
}

function list2bits(){
  order=`tr " " "\n" <<< "$1" | sort -n -r | tr "\n" " "`
  max=`cut -d" " -f1 <<< "$order"`
  len=$((max + 1))
  res=`printf '0%.0s' $(seq 1 $len)`
  # echo "bin: $res"
  for i in $order; do
    idx=$((len - i))
    # echo "iri $dx"
    res=${res:0:idx-1}1${res:idx}
    # echo "bin: $res"
  done
  res=`echo "obase=16;ibase=2;$res" | bc`
  res=${res,,}
  echo 0x$res
}

function h64bits(){
  d=${1#0x}
  len=`wc -c <<< $d`
  len=$((len-1))
  if [ $len -gt 16 ]; then
    l=$((len-16))
    echo 0x${d:0:l}
  else
     echo 0x0
  fi
}

function l64bits(){
  d=${1#0x}
  len=`wc -c <<< $d`
  len=$((len-1))
  if [ $len -gt 16 ]; then
    l=$((len-16))
    r0=${d:l:len}
    # r=${r0##+(0)}
    r=`sed -e "s/^0*//" <<< $r0`
    echo 0x$r
  else
    echo $1
  fi
}

allocate_cups(){
argv=$#
if [ $# -le 2 ]; then
  echo "input $# arguments, it should not less than 2 arguments"
  return 1
fi

CONF=$1
NUM=$2

if [ ! -e "$CONF" ]; then
  echo "The first argument is configure file, it does not exist!"
  return 1
fi

if [[ ! -z "${NUM//[0-9]}" ]]; then
  echo "The second argument is required CPU numbers, it should be a number!"
  return 1
fi

avaliable=$((argv - 2))

if [ "$avaliable" -lt "$NUM" ]; then
  echo "The process requires no less than $NUM, But k8s only allocate $avaliable to it!"
  return 1
fi

echo "Please implement your CPU pin configure here, and call 5G CNF entry-point!"
}

CPUS=$(get_cpu_list)
echo "Avaliable CPUS: $CPUS"
CONF=$CUPATH
NUM=6  # required CPU numbers
allocate_cups $CONF $NUM $CPUS

# CU CPUS
CU_HOUS_EKEEPING=$(index_strings 2 1 $CPUS)
CU_CONTROL_PLANE=$(index_strings 2 1 $CPUS)

# UDP_RX_THREAD - Applicable for FAST_PKT_RX_THREADS only
CU_UP_UDP_RX_THREAD=$(index_strings 3 1 $CPUS)
CU_UP_UDP_RX_DL_THREAD=$(index_strings 4 1 $CPUS)
CU_UP_UDP_RX_UL_THREAD=$(index_strings 5 1 $CPUS)
CU_UP_DL_THREAD=$(index_strings 5 1 $CPUS)
CU_UP_UL_THREAD=$(index_strings 2 1 $CPUS)

# Below two parameters applicable if flag SEPARATE_UDP_TX_THREAD is enabled, currenlty not supported
CU_UP_UDP_TX_DL_THREAD=$(index_strings 4 1 $CPUS)
CU_UP_UDP_TX_UL_THREAD=$(index_strings 4 1 $CPUS)
CU_DPDK_CORE_0=$(index_strings 2 1 $CPUS)

# FAST_CRYPTO_RXFAST_CRYPTO_RX
CU_FAST_CRYPTO_RXFAST_CRYPTO_RX=$(index_strings 6 1 $CPUS)

# ----------------  CU CPUs  -----------------------
NUM=$CU_HOUS_EKEEPING
# NUM=100
sed -i -e "s/\(LOG_READER_THREAD_CORE_ID_LIST.*= \).*/\1{$NUM}/" $CUPATH
sed -i -e "s/\(TIMER_THREAD_CORE_ID_LIST.*= \).*/\1{$NUM}/" $CUPATH

NUM=$CU_CONTROL_PLANE
# NUM=100
sed -i -e "s/\(OAM_AGENT_THREAD_CORE_ID_LIST.*= \).*/\1{$NUM}/" $CUPATH
sed -i -e "s/\(COMMON_CNTRL_THREAD_CORE_ID_LIST.*= \).*/\1{$NUM}/" $CUPATH
sed -i -e "s/\(SCTP_CNTRL_THREAD_CORE_ID_LIST.*= \).*/\1{$NUM}/" $CUPATH
sed -i -e "s/\(RM_THREAD_CORE_ID_LIST.*= \).*/\1{$NUM}/" $CUPATH
sed -i -e "s/\(SCTP_SERVER_THREAD_CORE_ID_LIST.*= \).*/\1{$NUM}/" $CUPATH
sed -i -e "s/\(UE_CNTRL_THREAD_CORE_ID_LIST.*= \).*/\1{$NUM}/" $CUPATH
sed -i -e "s/\(SCTP_NG_CLIENT_THREAD_CORE_ID_LIST.*= \).*/\1{$NUM}/" $CUPATH
sed -i -e "s/\(SCTP_XN_CLIENT_THREAD_CORE_ID_LIST.*= \).*/\1{$NUM}/" $CUPATH
sed -i -e "s/\(BEARER_CNTRL_THREAD_CORE_ID_LIST.*= \).*/\1{$NUM}/" $CUPATH
sed -i -e "s/\(SCTP_E1_CLIENT_THREAD_CORE_ID_LIST.*= \).*/\1{$NUM}/" $CUPATH
sed -i -e "s/\(UDP_RX_E1_PRIME_SPLIT_THREAD_CORE_ID_LIST.*= \).*/\1{$NUM}/" $CUPATH

NUM=$CU_UP_UDP_RX_THREAD
# NUM=100
sed -i -e "s/\(UDP_RX_THREAD_CORE_ID_LIST.*= \).*/\1{$NUM}/" $CUPATH
NUM=$CU_UP_UDP_RX_DL_THREAD
# NUM=100
sed -i -e "s/\(UDP_RX_DL_THREAD_CORE_ID_LIST.*= \).*/\1{$NUM}/" $CUPATH
NUM=$CU_UP_UDP_RX_UL_THREAD
# NUM=100
sed -i -e "s/\(UDP_RX_UL_THREAD_CORE_ID_LIST.*= \).*/\1{$NUM}/" $CUPATH
NUM=$CU_UP_DL_THREAD
# NUM=100
sed -i -e "s/\(^DL_THREAD_CORE_ID_LIST.*= \).*/\1{$NUM}/" $CUPATH
NUM=$CU_UP_UL_THREAD
# NUM=100
sed -i -e "s/\(^UL_THREAD_CORE_ID_LIST.*= \).*/\1{$NUM}/" $CUPATH
NUM=$CU_UP_UDP_TX_DL_THREAD
# NUM=100
sed -i -e "s/\(UDP_TX_DL_THREAD_CORE_ID_LIST.*= \).*/\1{$NUM}/" $CUPATH
NUM=$CU_UP_UDP_TX_UL_THREAD
# NUM=100
sed -i -e "s/\(UDP_TX_UL_THREAD_CORE_ID_LIST.*= \).*/\1{$NUM}/" $CUPATH

NUM=$CU_DPDK_CORE_0
# NUM=100
#sed -i -e "/\[CORE_0\]/{n;s/\(CORE_ID.*= \).*/\1$NUM/}" $CUPATH
sed -i "s/^CORE_ID =.*/CORE_ID =$NUM/g"  /root/config/sys_config.txt

NUM=$CU_FAST_CRYPTO_RXFAST_CRYPTO_RX
# NUM=100
sed -i -e "s/\(FAST_CRYPTO_RX_THREAD_CORE_ID_LIST.*= \).*/\1{$NUM}/" $CUPATH

echo "Hello from the script residing in helm chart."
echo "New line added here."
echo "Sleeping for infinity!"
# sleep infinity
sleep 60
/root/docker-entrypoint.sh
