# INTEL CONFIDENTIAL
#
# Copyright 2021 Intel Corporation.
#
# This software and the related documents are Intel copyrighted materials, and your use of
# them is governed by the express license under which they were provided to you ("License").
# Unless the License provides otherwise, you may not use, modify, copy, publish, distribute,
# disclose or transmit this software or the related documents without Intel's prior written permission.
#
# This software and the related documents are provided as is, with no express or implied warranties,
# other than those that are expressly stated in the License.

---

- name: Install KubeVirt
  block:
  - name: create temporary directory
    tempfile:
      state: directory
      suffix: kubevirt-operator
    register: tmp_dir
  - name: Download kubevirt controller
    get_url:
      url: "{{ _kubevirt_cr_url }}"
      dest: "{{ tmp_dir.path }}/kubevirt-cr.yaml"
    register: result
    retries: "{{ number_of_retries }}"
    until: result is succeeded
    delay: "{{ retry_delay }}"
  - name: Download KV Operator
    get_url:
      url: "{{ _kubevirt_operator_url }}"
      dest: "{{ tmp_dir.path }}/virt-operator.yaml"
    register: result
    retries: "{{ number_of_retries }}"
    until: result is succeeded
    delay: "{{ retry_delay }}"
  - name: template kustomization.yml to tmp directory
    template:
      src: kustomization.yml.j2
      dest: "{{ tmp_dir.path }}/kustomization.yml"
      mode: a=rw,u+x
    loop:
      - virt
  - name: KV Operator Install
    shell: kubectl kustomize . | kubectl apply -f -
    args:
      chdir: "{{ tmp_dir.path }}"
  - name: KV Controller Install
    command: kubectl apply -f "{{ tmp_dir.path }}/kubevirt-cr.yaml"
    register: result
    retries: "{{ number_of_retries }}"
    until: result is succeeded
    delay: "{{ retry_delay }}"
  - name: remove temporary directory
    file:
      path: "{{ tmp_dir.path }}"
      state: absent
    when: tmp_dir.path is defined

- name: virtctl install
  block:
  - name: create temporary directory
    tempfile:
      state: directory
      suffix: virtctl
    register: tmp_dir
  - name: download virtctl repo
    get_url:
      url: "{{ _virtctl_url }}"
      dest: "{{ tmp_dir.path }}/{{ _virtctl_tar }}"
    register: result
    retries: "{{ number_of_retries }}"
    until: result is succeeded
    delay: "{{ retry_delay }}"
  - name: Unarchive virtctl
    unarchive:
      src: "{{ tmp_dir.path }}/{{ _virtctl_tar }}"
      dest: "{{ tmp_dir.path }}"
      remote_src: yes
  - name: Install virt
    copy:
      src: "{{ tmp_dir.path }}/virtctl/virtctl-linux-amd64"
      dest: "{{ _virtctl_dir }}/{{ _virtctl_name }}"
      remote_src: yes
      mode: a=rx,u+w
    become: yes
  - name: remove temporary directory
    file:
      path: "{{ tmp_dir.path }}"
      state: absent
    when: tmp_dir.path is defined

- name: install CDI
  block:
  - name: create temporary directory
    tempfile:
      state: directory
      suffix: cdi-operator
    register: tmp_dir
  - name: Download CDI Operator
    get_url:
      url: "{{ _cdi_operator_url }}"
      dest: "{{ tmp_dir.path }}/cdi-operator.yaml"
    register: result
    retries: "{{ number_of_retries }}"
    until: result is succeeded
    delay: "{{ retry_delay }}"
  - name: Download CDI Controller
    get_url:
      url: "{{ _cdi_cr_url }}"
      dest: "{{ tmp_dir.path }}/cdi-cr.yaml"
    register: result
    retries: "{{ number_of_retries }}"
    until: result is succeeded
    delay: "{{ retry_delay }}"
  - name: template kustomization.yml to tmp directory
    template:
      src: kustomization.yml.j2
      dest: "{{ tmp_dir.path }}/kustomization.yml"
      mode: a=rw,u+x
    loop:
      - cdi
  - name: KV Operator Install
    shell: kubectl kustomize . | kubectl apply -f -
    args:
      chdir: "{{ tmp_dir.path }}"
  - name: CDI Operator Install
    command: kubectl apply -f "{{ tmp_dir.path }}/cdi-operator.yaml"
    register: result
    retries: "{{ number_of_retries }}"
    until: result is succeeded
    delay: "{{ retry_delay }}"
  - name: CDI Controller Install
    command: kubectl apply -f "{{ tmp_dir.path }}/cdi-cr.yaml"
    register: result
    retries: "{{ number_of_retries }}"
    until: result is succeeded
    delay: "{{ retry_delay }}"
  - name: check if proxy is enabled
    set_fact:
      _proxy_enabled: >
        {{ proxy_env is defined and
           (('http_proxy' in proxy_env and proxy_env['http_proxy'] | length) or
            ('https_proxy' in proxy_env and proxy_env['https_proxy'] | length)) | default(False) }}
  - name: add proxy to kubectl cdi cdi
    block:
      - name: template the proxy settings file
        template:
          src: proxy.yaml.j2
          dest: "{{ tmp_dir.path }}/proxy.yaml"
      - name: template cdi proxy kustomization.yml to tmp directory
        template:
          src: proxy_kustomization.yml.j2
          dest: "{{ tmp_dir.path }}/kustomization.yml"
      - name: apply the proxy settings
        shell: kubectl kustomize . | kubectl apply -f -
        args:
          chdir: "{{ tmp_dir.path }}"
        changed_when: true
    when: _proxy_enabled
  - name: remove temporary directory
    file:
      path: "{{ tmp_dir.path }}"
      state: absent
    when: tmp_dir.path is defined

- name: label CDI namespace
  command: kubectl label namespace/cdi ns=cdi --overwrite=true
  changed_when: true

- name: create temp directory for KubeVirt related yaml
  tempfile:
    state: directory
    suffix: -kubevirt
  register: kv_dir

- name: copy traffic rule file for CDI
  copy:
    src: cdiNetworkPolicy.yaml
    dest: "{{ kv_dir.path }}/cdiNetworkPolicy.yaml"
    mode: a=rw,u+x

- name: check if CDI traffic rule exists
  command: kubectl get networkpolicy cdi-upload-proxy-policy
  ignore_errors: yes
  register: cdi_exist
  changed_when: false

- name: set CDI traffic rule
  command: kubectl create -f cdiNetworkPolicy.yaml
  args:
    chdir: "{{ kv_dir.path }}"
  changed_when: true
  when: cdi_exist.rc != 0

