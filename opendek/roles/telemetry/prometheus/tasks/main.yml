# SPDX-License-Identifier: Apache-2.0
# Copyright (c) 2020-2021 Intel Corporation

---
- name: check if Prometheus release already exists
  command: helm status prometheus -n {{ telemetry_namespace }}
  failed_when: false
  register: get_release_prometheus
  changed_when: false

- name: install Prometheus chart
  block:
    - name: create temporary directory
      tempfile:
        state: directory
        suffix: prometheus
      register: tmp_dir

    - name: create certificates for Prometheus server
      include_role:
        name: kubernetes/certs
      vars:
        tls_secret_name: "{{ _proxy_secret_name }}"
        desired_namespace: "{{ telemetry_namespace }}"
        dns_names: ['prometheus']

    - name: create certificates for NodeExporter
      include_role:
        name: kubernetes/certs
      vars:
        tls_secret_name: "{{ _node_exporter_secret }}"
        desired_namespace: "{{ telemetry_namespace }}"
        dns_names: ['node_exporter']

    - name: template values.yml to tmp directory
      template:
        src: values.yml.j2
        dest: "{{ tmp_dir.path }}/values.yml"
        mode: preserve

    - name: add default Helm repository
      command: helm repo add stable https://charts.helm.sh/stable
      changed_when: true

    - name: create Prometheus chart template directory
      file:
        name: "{{ item }}"
        state: directory
        mode: a=rx,u+w
      loop:
        - "{{ _prometheus_chart_dir }}"
        - "{{ _prometheus_chart_dir }}/templates"

    - name: download Prometheus chart
      get_url:
        url: "{{ _prometheus_chart_url }}/{{ item }}"
        dest: "{{ _prometheus_chart_dir }}"
      register: result
      retries: "{{ number_of_retries }}"
      until: result is succeeded
      delay: "{{ retry_delay }}"
      loop: "{{ _prometheus_chart }}"

    - name: create destination directories
      file:
        state: directory
        mode: a=rx,u+w
        path: "{{ _prometheus_chart_dir }}/{{ item | dirname }}"
      loop: "{{ _prometheus_chart_templates }}"

    - name: download Prometheus chart templates
      get_url:
        url: "{{ _prometheus_chart_url }}/{{ item }}"
        dest: "{{ _prometheus_chart_dir }}/{{ item }}"
      register: result
      retries: "{{ number_of_retries }}"
      until: result is succeeded
      delay: "{{ retry_delay }}"
      loop: "{{ _prometheus_chart_templates }}"

    - name: create directories for persistent volumes
      file:
        path: "{{ _pv_dir }}/{{ item }}"
        state: directory
        mode: a=rx,u+w
      loop: "{{ _pv_names }}"
      become: yes

    - name: template definitions of persistent volumes
      template:
        src: "volume.yml"
        dest: "{{ tmp_dir.path }}/{{ item }}.yml"
        mode: preserve
      loop: "{{ _pv_names }}"
      changed_when: true

    - name: apply definitions of persistent volumes
      command: kubectl apply -n {{ telemetry_namespace }} -f "{{ tmp_dir.path }}/{{ item }}.yml"
      loop: "{{ _pv_names }}"
      changed_when: true

    - name: copy template file
      copy:
        src: "{{ item.src }}"
        dest: "{{ item.dest }}"
        mode: preserve
      loop:
        - {
            src: node-exporter-configmap.yaml,
            dest: "{{ _prometheus_chart_dir }}/templates/node-exporter/cm.yaml",
          }
        - {
            src: server-service-tls.yaml,
            dest: "{{ _prometheus_chart_dir }}/templates/server/service-tls.yaml",
          }
        - {
            src: server-proxy-configmap.yaml,
            dest: "{{ _prometheus_chart_dir }}/templates/server/proxy-configmap.yaml",
          }

    - name: install patch utility
      package:
        name: patch
        state: present
      become: yes

    - name: apply node-exporter-daemonset patch
      patch:
        src: node-exporter-daemonset.patch
        dest: "{{ _prometheus_chart_dir }}/templates/node-exporter/daemonset.yaml"
        strip: 1
        binary: false
        backup: false

    - name: find backup files
      find:
        paths: "{{ _prometheus_chart_dir }}/templates"
        patterns: "*.orig"
        recurse: true
      register: backup_files

    - name: remove backup files
      file:
        path: "{{ item.path }}"
        state: absent
      loop: "{{ backup_files.files }}"
      changed_when: true

    - name: update Prometheus dependencies (kube-state-metrics)
      command:
        cmd: helm dep update
        chdir: "{{ _prometheus_chart_dir }}"

    - name: install Prometheus release
      command: "helm install prometheus --namespace {{ telemetry_namespace }} -f {{ tmp_dir.path }}/values.yml {{ _prometheus_chart_dir }}"
      changed_when: true

    - name: remove temporary directory
      file:
        path: "{{ tmp_dir.path }}"
        state: absent
      when: tmp_dir.path is defined
  when: get_release_prometheus.rc != 0
