#!/usr/bin/env bash
# INTEL CONFIDENTIAL
#
# Copyright 2020-2022 Intel Corporation.
#
# This software and the related documents are Intel copyrighted materials, and your use of
# them is governed by the express license under which they were provided to you ("License").
# Unless the License provides otherwise, you may not use, modify, copy, publish, distribute,
# disclose or transmit this software or the related documents without Intel's prior written permission.
#
# This software and the related documents are provided as is, with no express or implied warranties,
# other than those that are expressly stated in the License.

# example:
if [ -z "$1" ] ;then
cat <<< '
kubectl sriov net render "$(jq <<EOF
{
  "name": "Hello",
  "resourceName": "RRU",
  "networkNamespace": "smartedge-apps"
}
EOF
)"'

echo ""
echo "---- Optional parameters: ----"
echo '"vlan": '
echo '"linkState": '
echo '"networkNamespace": '
echo '"maxTxRate":'
echo '"minTxRate":'
echo '"vlanQoS":'
echo '"trust":'
echo '"capabilities":'
echo '"spoofChk":'
echo '"ipam":'
echo ""

echo "For netdev network ipam, json format example as follow:"
echo '"ipam":
    {
    "type": "host-local",
    "subnet": "10.10.10.0/24",
    "rangeStart": "10.10.10.10",
    "rangeEnd": "10.10.10.41",
    "routes": [{
      "dst": "0.0.0.0/0"
    }],
    "gateway": "10.10.10.1"
    }'
echo "For netdev network ipam, string format example as follow:"
echo "ipam='"'
    {
    "type": "host-local",
    "subnet": "10.10.10.0/24",
    "rangeStart": "10.10.10.10",
    "rangeEnd": "10.10.10.41",
    "routes": [{
      "dst": "0.0.0.0/0"
    }],
    "gateway": "10.10.10.1"
    }'"'"
echo 'ipam=$(echo $ipam | sed -e '"'"'s/"/\\"/g'"')"
cat <<< '
kubectl sriov net render "$(jq <<EOF
{
  "name": "Hello",
  "resourceName": "RRU",
  "networkNamespace": "smartedge-apps",
  "ipam": "$ipam"
}
EOF
)"'


echo "---- Get exmaple by: ----"
echo "kubectl get sriovnetworks -A"
exit 0
fi


NS="sriov-network-operator"

# jinja2_render "$(jq <<EOF
# {
#   "name": "Hello"
# }
# EOF
# )" | yq
jinja2_render(){
item=${1:-{\}}
cat <<EOF | python3

from jinja2 import Template
from json import dumps, loads
import re
# name = input("Enter your name: ")

item=$item
item["namespace"]="$NS"
if "ipam" in item and type(item["ipam"])is dict:
    data = dumps(item["ipam"], indent=2)
    ldata=data.splitlines()
    item["ipam"] = ldata
if "ipam" in item and type(item["ipam"]) is str:
    data = dumps(loads(item["ipam"]), indent=2)
    ldata=data.splitlines()
    item["ipam"] = ldata

t="""
---

apiVersion: sriovnetwork.openshift.io/v1
kind: SriovNetwork
metadata:
  name: {{ item.name }}
  namespace: {{ item.namespace }}
spec:
  resourceName: {{ item.resourceName }}
  networkNamespace: {{ item.networkNamespace }}
{% if item.vlan is defined %}
  vlan: {{ item.vlan }}
{% endif %}
{% if item.linkState is defined %}
  linkState: {{ item.linkState }}
{% endif %}
{% if item.maxTxRate is defined %}
  maxTxRate: {{ item.maxTxRate }}
{% endif %}
{% if item.minTxRate is defined %}
  minTxRate: {{ item.minTxRate }}
{% endif %}
{% if item.vlanQoS is defined %}
  vlanQoS: {{ item.vlanQoS }}
{% endif %}
{% if item.trust is defined %}
  trust: "{{ item.trust }}"
{% endif %}
{% if item.capabilities is defined %}
  capabilities: "{{ item.capabilities }}"
{% endif %}
{% if item.spoofChk is defined %}
  spoofChk: "{{ item.spoofChk }}"
{% endif %}
{% if item.ipam is defined %}
  ipam: |-
  {% for line in item.ipam %}
    {{ line }}
  {% endfor %}
{% endif %}
"""

tm = Template(t)
msg = tm.render(item=item)
msg=re.sub(r'^\s*\n', '', msg, flags=re.MULTILINE)
print(msg)
EOF
}

jinja2_render "$1" | yq
