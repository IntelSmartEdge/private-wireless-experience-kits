#!/usr/bin/env bash
# INTEL CONFIDENTIAL
#
# Copyright 2020-2022 Intel Corporation.
#
# This software and the related documents are Intel copyrighted materials, and your use of
# them is governed by the express license under which they were provided to you ("License").
# Unless the License provides otherwise, you may not use, modify, copy, publish, distribute,
# disclose or transmit this software or the related documents without Intel's prior written permission.
#
# This software and the related documents are provided as is, with no express or implied warranties,
# other than those that are expressly stated in the License.


# This script is used to artifacts infomation in pwek sriov sriovnetworknodestate.
# copy this file to /usr/local/bin/ before use.
# usage:
#   kubectl sriov sriovnetworknodestate get ~[resource]
# or
#   kubectl sriov sriovnetworknodestate get [resource]
# Note:
#   for autocompletion, please ref: https://github.com/kubernetes/kubernetes/issues/74178
#   for template, please ref: https://kubernetes.io/docs/reference/kubectl/cheatsheet/
#   for jq keys and values, please ref: https://stackoverflow.com/questions/34226370/jq-print-key-and-value-for-each-entry-in-an-object
#   for pattern argument: There is a prefix "~" and sufix with substring. It does not support regular expression.


NS=sriov-network-operator

# {{if eq index .metadata.labels "sriov-network-operator-node" "yes"}}
nodes=$(kubectl get nodes -l "sriov-network-operator-node=yes" \
  -o go-template='{{range .items}}{{.metadata.name}}{{` `}}{{end}}')
# res=${1#\~}
key=${1:-nic.intel.com/}
res=${key#\~}
for i in $nodes; do
  echo "node=\"$i\""
  labels=$(kubectl get node $i -o=jsonpath='{.metadata.labels}')
  echo "---- sriov purpose labels: ----"
  jq 'with_entries(select(.key | contains("'$key'"))) | select(. != {})' <<< "$labels"
  echo "Update label by:"
  echo "  kubectl label --overwrite nodes \$node \${label}"

  annotations=$(kubectl get node $i -o=jsonpath='{.metadata.annotations}')
  echo "---- sriov purpose annotations: ----"
  jq 'with_entries(select(.key | contains("'$key'"))) | select(. != {})' <<< "$annotations"
  echo "Update annotation by:"
  echo "  kubectl annotate --overwrite nodes \$node \${annotation}"
done
