#!/bin/sh
# INTEL CONFIDENTIAL
#
# Copyright 2020-2022 Intel Corporation.
#
# This software and the related documents are Intel copyrighted materials, and your use of
# them is governed by the express license under which they were provided to you ("License").
# Unless the License provides otherwise, you may not use, modify, copy, publish, distribute,
# disclose or transmit this software or the related documents without Intel's prior written permission.
#
# This software and the related documents are provided as is, with no express or implied warranties,
# other than those that are expressly stated in the License.

cp /root/config_map/sys_config.txt /tmp/
#L1PATH=/home/flexRAN_preBuild/flexran_e2e/flexran_l1/flexran_l1_sw/bin/nr5g/gnb/l1
#SUB6_CONF=/home/flexRAN_preBuild/flexran_e2e/flexran_l1/flexran_l1_sw/bin/nr5g/gnb/l1/xrancfg_sub6.xml
#PHY_CONF=/home/flexRAN_preBuild/flexran_e2e/flexran_l1/flexran_l1_sw/bin/nr5g/gnb/l1/phycfg_xran.xml
# DU CPUS
#DUPATH=/home/flexRAN_preBuild/flexran_e2e/rsys_du/config/sys_config.txt
DUPATH=/tmp/sys_config.txt
SUB6_CONF=$DUPATH
cp /opt/bins/bc /bin/

mkdir -p /root/config/
sed -i -e "s/\(.*config_map\/sys_config.txt\)/# \1/" /root/docker-entrypoint.sh


get_cpu_list(){
cpus=$(cat /sys/fs/cgroup/cpuset/cpuset.cpus)
cpuset=$(cat /proc/self/cpuset)
cpus=$(cat /sys/fs/cgroup/cpuset/$cpuset/cpuset.cpus)
#cpus=$(cat /sys/fs/cgroup/cpuset/kubepods/cgroup/cpuset/$cpuset/cpuset.cpus)
cpu_l=""
for i in $(echo $cpus | tr , " "); do
  # if [[ $i =~ "-" ]]; then
  if [ -z "${i##*-*}" ]; then
    bg=${i%%-*}
    en=${i##*-}
    for j in $(seq $bg $en);do
      if [ -z "$cpu_l" ]; then
        cpu_l=$j
      else
        cpu_l="$cpu_l $j"
      fi
    done
  else
    if [ -z "$cpu_l" ]; then
        cpu_l=$i
      else
        cpu_l="$cpu_l $i"
    fi
  fi
done
echo $cpu_l
}

function to_cpu_list(){
cpus=$1
cpu_l=""
for i in `echo $cpus | tr , " "`; do
  if [[ $i =~ "-" ]]; then
    bg=${i%%-*}
    en=${i##*-}
    for j in $(seq $bg $en);do
      if [ -z "$cpu_l" ]; then
        cpu_l=$j
      else
        cpu_l="$cpu_l $j"
      fi
    done
  else
    if [ -z "$cpu_l" ]; then
        cpu_l=$i
      else
        cpu_l="$cpu_l $i"
    fi
  fi
done
echo $cpu_l
}


# $1 element tag, $2 element value, $3 the n time occurrent, $4 file name
function sub_xml_val ()
{
  sed -i -e ':a;N;$!ba; s/[^>]*\(<\/'"$1"'>\)/'"$2"'\1/'"$3"'' $4
}

# start length string, sh not support array, so we add this function.
index_strings(){
argv=$#
start=$1
len=$2
if [ $# -le 2 ]; then
  echo ""
  return 1
fi
if [[ ! -z "${start//[0-9]}" ]]; then
  echo ""
  return 1
fi
if [[ ! -z "${len//[0-9]}" ]]; then
  echo ""
  return 1
fi

idx=$((start + 2))
echo ${@:$idx:$len}
}

function list2bits(){
  order=`tr " " "\n" <<< "$1" | sort -n -r | tr "\n" " "`
  max=`cut -d" " -f1 <<< "$order"`
  len=$((max + 1))
  res=`printf '0%.0s' $(seq 1 $len)`
  # echo "bin: $res"
  for i in $order; do
    idx=$((len - i))
    # echo "iri $dx"
    res=${res:0:idx-1}1${res:idx}
    # echo "bin: $res"
  done
  res=`echo "obase=16;ibase=2;$res" | bc`
  res=${res,,}
  echo 0x$res
}

function h64bits(){
  d=${1#0x}
  len=`wc -c <<< $d`
  len=$((len-1))
  if [ $len -gt 16 ]; then
    l=$((len-16))
    echo 0x${d:0:l}
  else
     echo 0x0
  fi
}

function l64bits(){
  d=${1#0x}
  len=`wc -c <<< $d`
  len=$((len-1))
  if [ $len -gt 16 ]; then
    l=$((len-16))
    r0=${d:l:len}
    # r=${r0##+(0)}
    r=`sed -e "s/^0*//" <<< $r0`
    echo 0x$r
  else
    echo $1
  fi
}

allocate_cups(){
argv=$#
if [ $# -le 2 ]; then
  echo "input $# arguments, it should not less than 2 arguments"
  return 1
fi

CONF=$1
NUM=$2

if [ ! -e "$CONF" ]; then
  echo "The first argument is configure file, it does not exist!"
  return 1
fi

if [[ ! -z "${NUM//[0-9]}" ]]; then
  echo "The second argument is required CPU numbers, it should be a number!"
  return 1
fi

avaliable=$((argv - 2))

if [ "$avaliable" -lt "$NUM" ]; then
  echo "The process requires no less than $NUM, But k8s only allocate $avaliable to it!"
  return 1
fi

echo "Please implement your CPU pin configure here, and call 5G CNF entry-point!"
}

CPUS=$(get_cpu_list)
CPUS="15 16 17 18 19 20 21 22 23 24"
echo "Avaliable CPUS: $CPUS"
CONF=$SUB6_CONF
NUM=7  # required CPU numbers
allocate_cups $CONF $NUM $CPUS

# DU
#DUPATH=/home/flexRAN_preBuild/flexran_e2e/rsys_du/config/sys_config.txt
DU_HOUS_EKEEPING=$(index_strings 2 1 $CPUS)
DU_LOWER_CL=$(index_strings 2 1 $CPUS)
DU_CL_RECV=$(index_strings 3 1 $CPUS)
DU_UDP_RX=$(index_strings 2 1 $CPUS)

# NUM_THREAD_POOL         = 1  # need to set it
POOL1_WKR=$(index_strings 5 2 $CPUS)
POOL2_WKR=$(index_strings 5 2 $CPUS)
QCOM_TTI_RECV=0
QCOM_L1_SEND=0

# ----
# NUM_LCORE               = 4  # need to set it
DPDK_CORE_0=$(index_strings 7 1 $CPUS)
DPDK_CORE_1=$(index_strings 8 1 $CPUS)
DPDK_CORE_2=$(index_strings 9 1 $CPUS)
DPDK_CORE_3=$(index_strings 10 1 $CPUS)

# ----------------  DU CPUs  -----------------------
NUM=$DU_HOUS_EKEEPING
sed -i -e "s/\(TTI_TIMER_COREID.*= \).*/\1$NUM/" $DUPATH
sed -i -e "s/\(OAM_RX_COREID.*= \).*/\1$NUM/" $DUPATH
sed -i -e "s/\(LOG_READER_COREID.*= \).*/\1$NUM/" $DUPATH
sed -i -e "s/\(CLI_AGENT_COREID.*= \).*/\1$NUM/" $DUPATH
sed -i -e "s/\(OAM_AGENT_COREID.*= \).*/\1$NUM/" $DUPATH
sed -i -e "s/\(SCTP_COREID.*= \).*/\1$NUM/" $DUPATH
sed -i -e "s/\(TIMER_COREID.*= \).*/\1$NUM/" $DUPATH

NUM=$DU_LOWER_CL
sed -i -e "s/\(LOWER_CL_COREID.*= \).*/\1$NUM/" $DUPATH
NUM=$DU_CL_RECV
sed -i -e "s/\(CL_RECV_COREID.*= \).*/\1$NUM/" $DUPATH
NUM=$DU_UDP_RX
sed -i -e "s/\(UDP_RX_COREID.*= \).*/\1$NUM/" $DUPATH

NUM=$POOL1_WKR
CPUL=`to_cpu_list "$NUM"`
NUM=`tr -s '[:blank:]' ',' <<<"$CPUL"`
sed -i -e "s/\(POOL1_WKR_COREID.*= \).*/\1{$NUM}/" $DUPATH
NUM=$POOL2_WKR
CPUL=`to_cpu_list "$NUM"`
NUM=`tr -s '[:blank:]' ',' <<<"$CPUL"`
sed -i -e "s/\(POOL2_WKR_COREID.*= \).*/\1{$NUM}/" $DUPATH

NUM=$QCOM_TTI_RECV
sed -i -e "s/\(TTI_RECV.*= \).*/\1$NUM/" $DUPATH
NUM=$QCOM_L1_SEND
sed -i -e "s/\(L1_SEND.*= \).*/\1$NUM/" $DUPATH

NUM=$DPDK_CORE_0
sed -i -e "/\[CORE_0\]/{n;s/\(CORE_ID.*= \).*/\1$NUM/}" $DUPATH
NUM=$DPDK_CORE_1
sed -i -e "/\[CORE_1\]/{n;s/\(CORE_ID.*= \).*/\1$NUM/}" $DUPATH
NUM=$DPDK_CORE_2
sed -i -e "/\[CORE_2\]/{n;s/\(CORE_ID.*= \).*/\1$NUM/}" $DUPATH
NUM=$DPDK_CORE_3
sed -i -e "/\[CORE_3\]/{n;s/\(CORE_ID.*= \).*/\1$NUM/}" $DUPATH


cp  $DUPATH  /root/config/sys_config.txt
echo "Hello from the script residing in helm chart."
echo "New line added here."
echo "Sleeping for infinity!"
# sleep infinity
#sleep 360000
/bin/bash /root/docker-entrypoint.sh
